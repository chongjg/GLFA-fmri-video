NAME: fmri-video-sub12

Model:
  stage: 'fmri2video'
  pretrained_weight: './outputs/fmri-text-sub12/fmri-encoder-checkpoint_12000.pth'
  # - transformer-
  in_chans: 1
  encoder_depth: 24 # 24
  embed_dim: 1024 # 1024

  decoder_depth: 24 # 8
  decoder_embed_dim: 1024

  num_heads: 16
  drop_rate: 0
  norm_before: True

  image_size: [256, 256]
  patch_size: 16

  window_size: 5

  lr_encoder: 1e-4
  lr_cond_stage: 1e-4
  with_attn: True

  fmri2clip_cfg: 'fmri2clip'

  reg_scale: 1
  align_scale: 0.1
  align_embedding_scale: 0

  # func_kernel_size: 13
  # global_align: True
  func_kernel_size: 1
  global_align: False

Data:
  # path: '/ssd/lichong/fMRI-dataset/FD-dataset/fd-fmri-video-WebVid/'
  path: '/mnt/test/fMRI-dataset/ECCV2024-fmri-video-data-upload/fd-fmri-video-WebVid/'
  video_size: [576, 320] # [256, 640] # [h, w]
  fmri_size: [256, 256] # [256, 640] # [h, w]
  subjects: [1,2]

# Pretrained diffusers model path.
# pretrained_model_path: "./outputs/fmri-video-sub12-funcalign/checkpoint-7000/"
pretrained_model_path: "./models/zeroscope/" #https://huggingface.co/damo-vilab/text-to-video-ms-1.7b/tree/main
# pretrained_model_path: "./outputs/0223-video-Wen-sub1-t2v/checkpoint-4000/" #https://huggingface.co/damo-vilab/text-to-video-ms-1.7b/tree/main
# pretrained_model_path: "./models/potat1/" #https://huggingface.co/camenduru/potat1/tree/main

# The folder where your training outputs will be placed.
output_dir: "./outputs"

# Adds offset noise to training. See https://www.crosslabs.org/blog/diffusion-with-offset-noise
# If this is enabled, rescale_schedule will be disabled.
offset_noise_strength: 0.1
use_offset_noise: False

# Uses schedule rescale, also known as the "better" offset noise. See https://arxiv.org/pdf/2305.08891.pdf
# If this is enabled, offset noise will be disabled.
rescale_schedule: False

# When True, this extends all items in all enabled datasets to the highest length. 
# For example, if you have 200 videos and 10 images, 10 images will be duplicated to the length of 200. 
extend_dataset: False

# Caches the latents (Frames-Image -> VAE -> Latent) to a HDD or SDD. 
# The latents will be saved under your training folder, and loaded automatically for training.
# This both saves memory and speeds up training and takes very little disk space.
cache_latents: False

# If you have cached latents set to `True` and have a directory of cached latents,
# you can skip the caching process and load previously saved ones. 
cached_latent_dir: null #/path/to/cached_latents

# Train the text encoder for the model. LoRA Training overrides this setting.
train_text_encoder: False

# "cloneofsimo" or "stable_lora"
lora_version: "cloneofsimo"

# Use LoRA for the UNET model.
use_unet_lora: False

# Use LoRA for the Text Encoder. If this is set, the text encoder for the model will not be trained.
use_text_lora: False

# LoRA Dropout. This parameter adds the probability of randomly zeros out elements. Helps prevent overfitting.
# See: https://pytorch.org/docs/stable/generated/torch.nn.Dropout.html
lora_unet_dropout: 0.1

lora_text_dropout: 0.1

# https://github.com/kabachuha/sd-webui-text2video
# This saves a LoRA that is compatible with the text2video webui extension.
# It only works when the lora version is 'stable_lora'.
# This is also a DIFFERENT implementation than Kohya's, so it will NOT work the same implementation.
save_lora_for_webui: True

# The LoRA file will be converted to a different format to be compatible with the webui extension.
# The difference between this and 'save_lora_for_webui' is that you can continue training a Diffusers pipeline model
# when this version is set to False
only_lora_for_webui: False

# Choose whether or not ito save the full pretrained model weights for both checkpoints and after training.
# The only time you want this off is if you're doing full LoRA training.
save_pretrained_model: True

# The modules to use for LoRA. Different from 'trainable_modules'.
unet_lora_modules:
  # - "UNet3DConditionModel"
  #- "ResnetBlock2D"
  #- "TransformerTemporalModel"
  #- "Transformer2DModel"
  #- "CrossAttention"
  - "Attention"
  #- "GEGLU"
  - "TemporalConvLayer"

# The modules to use for LoRA. Different from `trainable_text_modules`.
text_encoder_lora_modules:
  - "CLIPEncoderLayer"
  #- "CLIPAttention"

# The rank for LoRA training. With ModelScope, the maximum should be 1024. 
# VRAM increases with higher rank, lower when decreased.
lora_rank: 4

# Validation data parameters.
validation_data:

  # A custom prompt that is different from your training dataset. 
  prompt: ""

  # Whether or not to sample preview during training (Requires more VRAM).
  sample_preview: True

  # The number of frames to sample during validation.
  num_frames: 12

  # Height and width of validation sample.
  width: 576
  height: 320

  # Number of inference steps when generating the video.
  num_inference_steps: 30

  # CFG scale
  guidance_scale: 6

# Learning rate for AdamW
learning_rate: 1e-4

# Weight decay. Higher = more regularization. Lower = closer to dataset.
adam_weight_decay: 0.01

# Optimizer parameters for the UNET. Overrides base learning rate parameters.
extra_unet_params: null
  #learning_rate: 1e-5
  #adam_weight_decay: 1e-4

# Optimizer parameters for the Text Encoder. Overrides base learning rate parameters.
extra_text_encoder_params: null
  #learning_rate: 5e-6
  #adam_weight_decay: 0.2

# How many batches to train. Not to be confused with video frames.
train_batch_size: 12
gradient_accumulation_steps: 1

# Maximum number of train steps. Model is saved after training.
max_train_steps: 30000

# Saves a model every nth step.
checkpointing_steps: 2000

# How many steps to do for validation if sample_preview is enabled.
validation_steps: 50

# Which modules we want to unfreeze for the UNET. Advanced usage.
trainable_modules:
  # - "all"
  # If you want to ignore temporal attention entirely, remove "attn1-2" and replace with ".attentions"
  # This is for self attetion. Activates for spatial and temporal dimensions if n_sample_frames > 1
  - "attn1"
  
  # This is for cross attention (image & text data). Activates for spatial and temporal dimensions if n_sample_frames > 1
  - "attn2"
  
  #  Convolution networks that hold temporal information. Activates for spatial and temporal dimensions if n_sample_frames > 1
  - 'temp_conv'


# Which modules we want to unfreeze for the Text Encoder. Advanced usage.
# trainable_text_modules:
#   - "all"

# Seed for validation.
seed: 64

# Whether or not we want to use mixed precision with accelerate
mixed_precision: "fp16"

# This seems to be incompatible at the moment.
use_8bit_adam: False 

# Trades VRAM usage for speed. You lose roughly 20% of training speed, but save a lot of VRAM.
# If you need to save more VRAM, it can also be enabled for the text encoder, but reduces speed x2.
gradient_checkpointing: True
text_encoder_gradient_checkpointing: False

# Xformers must be installed for best memory savings and performance (< Pytorch 2.0)
enable_xformers_memory_efficient_attention: False

# Use scaled dot product attention (Only available with >= Torch 2.0)
enable_torch_2_attn: True
